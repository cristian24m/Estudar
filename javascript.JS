Operadores
L√≥gicos

|| (OR): Retorna verdadeiro se pelo menos um valor for verdadeiro.

&& (AND): Retorna verdadeiro somente se ambos forem verdadeiros.

! (NOT): Inverte o valor l√≥gico.

Aritm√©ticos

+ (adi√ß√£o)

- (subtra√ß√£o)

* (multiplica√ß√£o)

/ (divis√£o)

% (resto da divis√£o)

** (exponencia√ß√£o)

Compara√ß√£o

== : compara valores (com coer√ß√£o de tipo).

=== : compara valores e tipos (mais seguro).

!= : diferente (com coer√ß√£o).

!== : diferente (sem coer√ß√£o).

<, >, <=, >=.

Outros

Un√°rios:

-x ‚Üí inverte n√∫mero.

typeof x ‚Üí retorna o tipo.

Tern√°rio:

const idade = 18;
const status = idade >= 18 ? "Adulto" : "Menor";

üî¢ Nota√ß√£o Cient√≠fica

Representa n√∫meros muito grandes ou pequenos:

const c = 2.998e8; // 2.998 √ó 10^8

üì¶ Vari√°veis

var ‚Üí antigo, escopo de fun√ß√£o, sofre hoisting. Evite usar.

let ‚Üí escopo de bloco, valor pode ser alterado.

const ‚Üí escopo de bloco, valor constante.

Exemplo:

let idade = 10;
idade = 15;

const tempo = 16;
// tempo = 12; // Erro!

Regras de nomes

N√£o pode come√ßar com n√∫mero.

Pode usar _ e $.

Use camelCase para boas pr√°ticas.

üõ† Fun√ß√µes
Declarada
function addNums(a, b) {
  return a + b;
}

Fun√ß√£o An√¥nima / Express√£o
const subtrair = function(a, b) {
  return a - b;
};

Arrow Function
const multiplicar = (a, b) => a * b;

Dicas

Arrow functions n√£o possuem this pr√≥prio.

Fun√ß√µes podem ser passadas como par√¢metros (higher-order functions).

üñ• Console

console.log(valor) ‚Üí imprime valor.

console.error("erro") ‚Üí mostra erro.

console.table(obj) ‚Üí imprime em tabela.

üî§ Strings
"abc".length;             // 3
"abcdef".substring(0, 5); // "abcde"
"abc".toUpperCase();      // "ABC"
"a-b-c".split('-');       // ["a","b","c"]
" teste ".trim();         // "teste"
"JS".includes("J");       // true

üìö Arrays
Cria√ß√£o
let frutas = ["ma√ß√£", "banana", "laranja"];

M√©todos Principais

push ‚Üí adiciona ao fim.

pop ‚Üí remove √∫ltimo.

shift ‚Üí remove primeiro.

unshift ‚Üí adiciona no in√≠cio.

length ‚Üí tamanho.

Slice / Splice

slice(inicio, fim) ‚Üí retorna c√≥pia parcial (n√£o altera original).

splice(inicio, qtd, ...itens) ‚Üí altera o array (remove/adiciona).

Concat
let novo = arr1.concat(arr2);

Itera√ß√£o
frutas.forEach(f => console.log(f));
let maiusculas = frutas.map(f => f.toUpperCase());
let filtradas = frutas.filter(f => f.startsWith("m"));
let temBanana = frutas.includes("banana");

üè∑ Tipos de Dados

number

string

boolean

object

undefined

null

function

symbol (√∫nico e imut√°vel)

bigint (n√∫meros grandes)

Exemplo:

typeof 42;         // "number"
typeof [1,2,3];    // "object"
typeof null;       // "object" (peculiaridade)

üßë Objetos
let pessoa = {
  nome: "Cristian",
  idade: 17,
  hobbies: ["jogar","comer"]
};
pessoa.email = "cristian@teste";


Acesso:

pessoa.nome;      // "Cristian"
pessoa["idade"];  // 17

üîÅ Estruturas de Controle
Condicionais
if (x > 10) {
  ...
} else if (x > 5) {
  ...
} else {
  ...
}

Switch
switch(cor) {
  case "red": console.log("Vermelho"); break;
  case "blue": console.log("Azul"); break;
  default: console.log("Outra cor");
}

Loops
for (let i = 0; i < 5; i++) {}
while (condicao) {}
do {} while (condicao);
for (let item of array) {}
for (let chave in objeto) {}

üèó Classes e Heran√ßa
class Person {
  constructor(nome, sobrenome) {
    this.nome = nome;
    this.sobrenome = sobrenome;
  }
  getFullName() {
    return `${this.nome} ${this.sobrenome}`;
  }
}

class Employee extends Person {
  constructor(nome, sobrenome, cargo) {
    super(nome, sobrenome);
    this.cargo = cargo;
  }
  getJobDescription() {
    return `${this.getFullName()} √© ${this.cargo}`;
  }
}

üîÑ Convers√£o de Tipos
Expl√≠cita
String(123);     // "123"
Number("123");   // 123
Boolean("");     // false

Impl√≠cita
"10" + 2;   // "102"
"10" - 2;   // 8
"5" == 5;   // true
"5" === 5;  // false

üìù Dicas Gerais

Prefira === em vez de ==.

Use const sempre que poss√≠vel.

Arrays e objetos s√£o mut√°veis mesmo quando declarados com const.

Evite var.

Use template strings:

`Ol√°, ${nome}!`

Comando

artigo shell https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#index-eval

Comando ctrl + alt + t abre o terminal

l lista as pastas
ls Listagem de arquivos e pastas 
ls -l podemos verificar as permissões para cada  arquivo e pasta
cd PASTA Navega até a pasta desejada
mkdir - PASTA Cria uma nova pasta
rm - ARQUIVO Exclui um arquivo
rm –r - PASTA Exclui uma pasta
rm -fr remove a pasta forçando 
pwd - Apresenta o diretório atual
cp ORIGEM DESTINO - Copia um arquivo da origem para o destino
mv ORIGEM DESTINO - Move ou recorta um arquivo da origem para o destino
touch ARQUIVO - Cria um arquivo em branco
head ARQUIVO - Exibe as 10 primeiras linhas do arquivo
tail ARQUIVO - Exibe as 10 últimas linhas do arquivo
whoami - Apresenta o nome do usuário logado
top - Lista os programas em execução e dados de uso de memória
date - Exibe a data e hora
adduser NOMEUSUARIO - Cria um novo usuário
Sudo - permissão de super user
<> -v - para retornar a versão de algo

echo “Conteúdo do arquivo” >
<nome do arquivo>. Esse comando criará um novo arquivo chamado aulapratica.txt e dentro do
arquivo estará o texto que digitamos entre as aspas.

Para conseguir criar todo o caminho sem precisar criar uma
pasta por vez, podemos utilizar o parâmetro -p do comando mkdir para indicar que
desejamos criar toda a estrutura de pastas caso ela ainda não exista

LSOF || https://neverendingsecurity.wordpress.com/2015/04/13/lsof-commands-cheatsheet/
Este comando vai retornar os processos que os usuários rodaram no ambiente por assim dizer;
pode ser combinado com outros comandos como:
LSOF | HEAD or TAIL vai trazer as 10 linhas do LSOF
LSOF | grey "" voce pode pesquisar algo nas linhas do LSOF
LSOF | wc -l return all the files you open in the system, but i don´t understend directly or not.

Comando scp /* || https://www.tecmint.com/scp-commands-examples/ || https://phoenixnap.com/kb/linux-scp-command
scp nome_do_arquivo_de_origem nome_do_usuário@host_de_destino:pasta_de_destino
Você pode usar o -vparâmetro " " para imprimir informações de depuração na tela. Ele pode ajudar a depurar problemas de conexão, autenticação e configuração.
O comando a seguir copia um arquivo “ scp-cheatsheet.pdf ” de um sistema Linux local para um remoto no diretório /home/tecmint .
$ scp -v scp-cheatsheet.pdf tecmint@192.168.0.183 :/home/tecmint/.
 comando a seguir copia um arquivo “ ssh-cheatsheet.pdf ” de um host remoto para outro sistema host remoto no diretório /home/tecmint .
$ scp -v tecmint@192.168.0.183 :/home/ravi/ssh-cheatsheet.pdf tecmint@192.168.0.102 :/home/anusha/.
O parâmetro “ -p” preservará os tempos de modificação e acesso originais dos arquivos enquanto os copia, juntamente com o tempo estimado e a velocidade de conexão, aparecerão na tela.

Copiar arquivos sem o -Cparâmetro " " resultará em 1661,3 segundos. Você pode comparar o resultado com o comando abaixo usando o -C"parâmetro " .
 10 vezes mais rápido do que não usar o -Cparâmetro " ". Se você estiver copiando muitos arquivos pela rede, o -Cparâmetro " " ajudará a reduzir o tempo total necessário.

Outro parâmetro que pode ser útil é o -lparâmetro " -l ". O parâmetro " -l " limitará a largura de banda a ser usada . 
Ele será útil se você criar um script de automação para copiar muitos arquivos, mas não quiser que a largura de banda seja drenada pelo processo SCP .
O  valor 400-l atrás do parâmetro “ ” significa que limitamos a largura de banda do processo SCP a apenas 50 KB/seg .
Um ponto a lembrar é que a largura de banda é especificada em quilobits / seg ( kbps ). Isso significa que 8 bits equivalem a 1 byte .
Certifique-se de que ele usa “ ” maiúsculo Pe não “ p” já que “ p” já é usado para tempos e modos preservados.

Às vezes, precisamos copiar o diretório e todos os arquivos/diretórios  dentro dele. Seria melhor se pudéssemos fazer isso em um único comando usando o -rparâmetro " ", que copia todo o diretório recursivamente.

O servidor proxy geralmente é usado em ambientes de escritório. Nativamente, o SCP não é configurado como um proxy. Quando seu ambiente usa um proxy, você precisa " informar " ao SCP para se comunicar com o proxy.

Aqui está o cenário. O endereço do proxy é 10.0.96.6 e a porta do proxy é 8080. O proxy também implementou a autenticação do usuário. Primeiro, você precisa criar o arquivo " ~/.ssh/config" . Depois, insira este comando dentro dele.

ProxyCommand /usr/bin/corkscrew 10.0.96.6 8080 %h %p ~/.ssh/proxyauth
Então você precisa criar o arquivo “ ~/.ssh/proxyauth ” que contém.

meunomedeusuário:minhasenha
Depois disso, você pode executar o SCP de forma transparente, como de costume.
*\

find -name "" 
mostra onde estão os arquivos com este nome.

which "" - Procura no(s) diretório(s) listado(s) na variável de ambiente PATH o executável cujo nome você fornece, e retorna o caminho completo para ele.

nano - voce pode editar um arquivo de texto 
Salve e feche o editor (Ctrl+O, Enter, depois Ctrl+X no nano).
source <arquivo> recarregar o arquivo depois do nano

eval  - O eval recebe uma string como argumento, interpreta o seu conteúdo como se fosse código de shell e o executa no contexto do shell atual.

touch - Atualiza a data de “último acesso” e “última modificação” de um arquivo. Se o arquivo não existir, o touch o cria vazio.














\\\\\\\\\\\\\\-------------------------------BASH-------------------------------/////////////
1. O que é Bash?
Bash é um interpretador de comandos usado em sistemas Linux/Unix. Ele permite automatizar tarefas e executar comandos por meio de scripts (.sh).

✍ 2. Criando um script Bash
Um script Bash é um arquivo de texto que começa com a linha:

b
#!/bin/bash
Exemplo simples:


#!/bin/bash
echo "Olá, mundo!"
Execute com:


bash nome_do_arquivo.sh
 3. Variáveis
Criando variáveis:

nome=Maria       # sem espaços ao redor do =
idade=25
greeting='Olá mundo!'
Usando variáveis:

echo $nome
Use $ para acessar o valor de uma variável.

4. Escapando caracteres especiais
O símbolo $ é especial (indica variável).

Para imprimir um $ literal, use \ para escapar:


echo "Preço: \$5"
Saída:

Preço: $5
 5. Substituição de comandos
Você pode usar o resultado de um comando como valor de uma variável:

Sintaxe:

VAR=$(comando)
# ou
VAR=`comando`
Exemplo:

hoje=$(date +%Y-%m-%d)
echo "Data de hoje: $hoje"
6. Quebrando linha no terminal (sem executar)
Para quebrar linha enquanto digita no terminal:
Use barra invertida no fim da linha:


echo "Isto é uma linha \
que continua na próxima linha"
Ou pressione Ctrl + V, depois Enter, para inserir uma quebra literal.

 7. Argumentos passados para o script
Quando você executa um script passando valores:

bash script.sh valor1 valor2 valor3
Esses valores são chamados argumentos.

Dentro do script:
Variável	Significado
$0	Nome do script
$1	Primeiro argumento
$2	Segundo argumento
$#	Quantidade de argumentos
$@	Todos os argumentos

Exemplo:

#!/bin/bash
echo "Script: $0"
echo "Primeiro argumento: $1"
echo "Argumentos recebidos: $#"
echo "Todos os argumentos: $@"
Executando com:


bash script.sh maçã banana uva
Saída:


Script: script.sh
Primeiro argumento: maçã
Argumentos recebidos: 3
Todos os argumentos: maçã banana uva
 8. Arrays em Bash
Criando um array:
frutas=(maçã banana "Fruit Basket" laranja)
Use aspas para manter valores com espaço como uma única entrada.

Acessando elementos:

echo ${frutas[0]}   # maçã
echo ${frutas[2]}   # Fruit Basket
Atribuindo novo valor:


frutas[4]=melancia
 9. Funções em Bash
Você pode definir e usar funções dentro do seu script:


minha_funcao() {
  echo "Olá $1"
}
minha_funcao Maria
$1 é o primeiro argumento passado para a função.

